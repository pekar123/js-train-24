console.log("Завдання: 2 ==============================");

// Створюємо функцію task2
function task2() {
  // Створюємо функцію promise1
  function promise1(){
    // Повертаємо новий проміс
    // Використовуємо setTimeout для імітації асинхронної операції, яка завершується через 2 секунди.
     // Після 2 секунд викликаємо resolve з результатом проміса, який є рядком "Проміс 1 виконано"
    return new Promise((res,rej) => {
     setTimeout(res, 2000, "Проміс 1 виконано"     
     )
    })
  }

  // Створюємо функцію promise2
  function promise2 () {
    // Повертаємо новий проміс
    // Використовуємо setTimeout для імітації асинхронної операції, яка завершується через 5 секунди.
    // Після 5 секунд викликаємо resolve з результатом проміса, який є рядком "Проміс 2 виконано"
    return new Promise((res,rej) =>{
      setTimeout(res, 5000, "Проміс 1 виконано"     
      )
    })
  }
  
  
  // Використовуємо Promise.race для визначення, який проміс виконується першим.
  Promise.race([promise1(),promise2()])
  .then((data) =>{
    console.log(data)
  })
  .catch((error) => {
    console.log("повідомлення про помилку",error)
  })
  .finally(() => {
    console.log("Завдання 2 завершено")
  })
  // Метод повертає новий проміс, який вирішується або відхиляється негайно після розв'язання або відхилення будь-якого з промісів у переданому списку.
  // У разі успіху виводимо результат
  // У разі помилки виводимо повідомлення про помилку
  // Незалежно від результату, виводимо повідомлення про завершення обробки промісів, який є рядом "Завдання 2 завершено"
}

// Викликаємо функцію task2
task2();
